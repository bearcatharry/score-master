
backend
- past game 
- current game / future game
- future game
team settings
team storage


//
//  TEAM
//––––––––––––––––––––––––––––––––––––––––––––––––––

import React, { Component } from "react";
import PropTypes from "prop-types";

//
//  COMPONENT
//––––––––––––––––––––––––––––––––––––––––––––––––––

class Team extends Component {
  render() {
    // Destructure props.
    const { data, homeOrAway, status, winner } = this.props;

    // Destructure data.
    let record;
    let { records } = data;
    [records] = records;
    if (records && records.name === "Total") {
      record = records.summary;
    }

    // Team class name.
    let teamClassName = "team team--" + homeOrAway;

    // If the game is over.
    if (status === "post") {
      // If this team is the winner.
      if (winner === homeOrAway) {
        // Add winner to the team name.
        teamClassName += " team--winner";

        // If this team is the loser.
      } else {
        // Add loser to the team name.
        teamClassName += " team--loser";
      }
    }

    return (
      <span className={teamClassName}>
        <span className="team__logo">
          <img src={data.team.logo} alt={data.team.location} />
        </span>
        <span className="team__name">
          <span className="abbreviation">{data.team.abbreviation}</span>
          <span className="location">{data.team.location}</span>
        </span>
        {/* Only show score if game is live or over. */}
        {status !== "pre" ? (
          <span className="team__score">{data.score}</span>
        ) : (
          <span className="team__record">{record}</span>
        )}
      </span>
      <div class="col-2">
        <img src={data.team.logo} alt={data.team.location} alt="Rockets" class="team"/>
      </div>
      <div class="col-7">{data.team.abbreviation}</div>
      <div class="col-3">
        {/* Only show score if game is live or over. */}
        {status !== "pre" ? (
          <span className="team__score">{data.score}</span>
        ) : (
          <span className="team__record">{record}</span>
        )}
      </div>
    );
  }
}

//
//  PROP TYPES
//––––––––––––––––––––––––––––––––––––––––––––––––––

Team.propTypes = {
  data: PropTypes.object.isRequired,
  homeOrAway: PropTypes.string.isRequired,
  winner: PropTypes.string.isRequired,
  status: PropTypes.string.isRequired
};

export default Team;



// WEBPACK FOOTER //
// ./src/components/Team.js




//
//  GAME
//––––––––––––––––––––––––––––––––––––––––––––––––––

import React, { Component } from "react";
import PropTypes from "prop-types";

import Team from "./Team";

//
//  COMPONENT
//––––––––––––––––––––––––––––––––––––––––––––––––––

class Game extends Component {
  constructor() {
    super();

    // Bind the context.
    this.renderGame = this.renderGame.bind(this);
  }

  //
  //  RENDER GAME
  //––––––––––––––––––––––––––––––––––––––––––––––––––

  renderGame(game) {
    // Game ID.
    const { id: gameId } = game;

    let sport = "nba";

    let timeScore;
    let gameStatusClass;
    const status = game.status.type.state; // pre, in, post.

    // Get start date.
    // const startDateString = game.competitions[0].startDate;
    // const startDate = new Date( startDateString );

    const away = game.competitions[0].competitors[1];
    const home = game.competitions[0].competitors[0];

    const awayScore = parseInt(away.score, 10);
    const homeScore = parseInt(home.score, 10);
    let winner = "";
    let game__status = ""
    // Get today's date.
    const today = new Date();

    // Get the current month.
    const currentMonth = today.getMonth();

    if sport === "nba" { 
    // If it's July... (note that January is 0)
        if (currentMonth === 6) {
          sport = "nba-summer-league";
          // If it's any other month.
        } else {
          sport = "nba";
        }
    }
    

    // If game is yet to start.
    if (status === "pre") {
      winner = "";
      gameStatusClass = "game--pre";

      // Use EST start time from API.
      timeScore = game.status.type.shortDetail;

      // Get the time without the day.
      // Original format: "10/21 - 8:30 PM EDT"
      timeScore = timeScore.substring(
        timeScore.indexOf(" - ") + 3,
        timeScore.length
      );

      // If game is live.
    } else if (status === "in") {
      winner = "";
      gameStatusClass = "game--live";
      timeScore = game.status.type.shortDetail;

      // If game is over.
    } else if (status === "post") {
      gameStatusClass = "game--post";
      timeScore = game.status.type.shortDetail;

      // If the home team is the winner.
      if (homeScore > awayScore) {
        // Set the home team as the winner.
        winner = "home";

        // If the away team is the winner.
      } else {
        // Set the away team as the winner.
        winner = "away";
      }
    }

    // If it's July... (note that January is 0)
    if (currentMonth === 6) {
      // Add Summer League URL param to end of URL.
      url += "&league=nba-summer-las-vegas";
    }

    return (
      <div className={gameStatusClass} >
        <span className="game__status">{timeScore}</span>
        <Team data={away} homeOrAway="away" winner={winner} status={status} />
        <Team data={home} homeOrAway="home" winner={winner} status={status} />
      </div>

      <div class="row"><h4>{gameDate}</h4></div>
        <div class="row bg-light">{timeScore}</div>
        <div class="row bg-light">
            <Team data={away} homeOrAway="away" winner={winner} status={status} />
            <Team data={home} homeOrAway="home" winner={winner} status={status} />
        </div>
    );
  }

  //
  //  RENDER
  //––––––––––––––––––––––––––––––––––––––––––––––––––

  render() {
    // Destructure props.
    const { game } = this.props;

    return <div className="game col-12">{this.renderGame(game)}</div>;

  }
}

//
//  PROP TYPES
//––––––––––––––––––––––––––––––––––––––––––––––––––

Game.propTypes = {
  game: PropTypes.object.isRequired
};

export default Game;

