{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getScore","bind","assertThisInitialized","state","score","homeScore","_this2","fetch","then","response","json","home","events","competitions","competitors","parseInt","console","log","setState","react_default","a","createElement","class","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2MAyEeA,cArEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,SAAWP,EAAKO,SAASC,KAAdP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAKhBA,EAAKU,MAAQ,CACXC,MAAO,GAGTX,EAAKO,WAZOP,0EAkBH,IACLY,EADKC,EAAAV,KAMTW,MAHM,kIAIHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAGJ,IAEIE,EAFQF,EAASG,OAEJ,GAAGC,aAAa,GAAGC,YAAY,GAEhDT,EAAYU,SAASJ,EAAKP,MAAO,IAEjCY,QAAQC,IAAIZ,GAEZC,EAAKY,SAAS,CACVd,MAAOC,MAGbW,QAAQC,IAAIrB,KAAKO,MAAMC,wCAMzB,OACEe,EAAAC,EAAAC,cAAA,OAAKC,MAAM,mBACLH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,OAAMH,EAAAC,EAAAC,cAAA,oBACjBF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,gBAAX,WACAH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,gBACPH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SACPH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,8BAA8BC,IAAI,kBAAkBF,MAAM,UAEvEH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SAAX,WACAH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SAAS1B,KAAKO,MAAMC,OAC/Be,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SACPH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,uBAAuBC,IAAI,WAAWF,MAAM,UAEzDH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SAAX,YACAH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SAAX,iBA/DEG,aCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,cD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.ebd9beb9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.getScore = this.getScore.bind(this);\n\n    // const score = this.getScore();\n   \n    // Get initial state.\n    this.state = {\n      score: 0\n    };\n\n    this.getScore();\n\n  }\n  \n\n  \n  getScore() {\n    let homeScore;\n    let url;\n    url = \"http://site.api.espn.com/apis/site/v2/sports/basketball/nba/scoreboard?lang=en&calendartype=blacklist&limit=100&dates=20190213\";\n    let home;\n\n    fetch(url)\n      .then(response => response.json())\n      .then(response => {\n        // console.log(response);\n\n        let games = response.events;\n\n        let home = games[6].competitions[0].competitors[0];\n\n        homeScore = parseInt(home.score, 10);\n\n        console.log(homeScore);\n\n        this.setState({\n            score: homeScore\n        });\n      });\n      console.log(this.state.score);\n  }\n\n\n\n  render() {\n    return (\n      <div class=\"game col-128888\">\n            <div class=\"row\"><h4>Feb 2</h4></div>\n            <div class=\"row bg-light\">4:00 PM</div>\n            <div class=\"row bg-light\">\n                <div class=\"col-2\">\n                    <img src=\"/images/houston_rockets.png\" alt=\"Houston Rockets\" class=\"team\"/>\n                </div>\n                <div class=\"col-7\">Rockets</div>\n                <div class=\"col-3\">{this.state.score}</div>\n                <div class=\"col-2\">\n                    <img src=\"/images/michigan.png\" alt=\"Michigan\" class=\"team\"/>\n                </div>\n                <div class=\"col-7\">Michigan</div>\n                <div class=\"col-3\">9999</div>\n            </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('all-games'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}