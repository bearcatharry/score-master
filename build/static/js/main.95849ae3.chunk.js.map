{"version":3,"sources":["App.js","setting.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getScore","bind","assertThisInitialized","state","score","homeScore","_this2","fetch","then","response","json","games","events","console","log","home","competitions","competitors","parseInt","setState","react_default","a","createElement","class","src","alt","Component","Selection","selectedTeams","i","keys","data","length","push","selectedTeamNames","isSelected","handleInputChange","event","target","value","type","checked","selectedIndex","dataset","indexnumber","abbreviation","indents","className","key","data-indexnumber","onChange","showSelected","getAllTeams","Boolean","window","location","hostname","match","ReactDOM","render","setting","document","getElementById","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.95849ae3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import Selection from './setting.js';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.getScore = this.getScore.bind(this);\n\n    // const score = this.getScore();\n    // let Selection = new Selection();\n   \n    // Get initial state.\n    this.state = {\n      score: 0,\n      // isSelected: Selection.isSelected\n    };\n\n    this.getScore();\n\n  }\n\n  \n  getScore() {\n    let homeScore;\n    let url;\n    url = \"http://site.api.espn.com/apis/site/v2/sports/basketball/nba/scoreboard\";\n    // url = \"http://site.api.espn.com/apis/site/v2/sports/basketball/nba/scoreboard?lang=en&calendartype=blacklist&limit=100&dates=20190213\";\n\n    let home;\n\n    fetch(url)\n      .then(response => response.json())\n      .then(response => {\n        // console.log(response);\n\n        let games = response.events;\n\n        console.log(games);\n\n        let home = games[6].competitions[0].competitors[0];\n\n        homeScore = parseInt(home.score, 10);\n\n        // console.log(homeScore);\n\n        this.setState({\n            score: homeScore\n        });\n      });\n      // console.log(this.state.score);\n  }\n\n\n\n  render() {\n    return (\n      <div class=\"game col-128888\">\n            <div class=\"row\"><h4>Feb 2</h4></div>\n            <div class=\"row bg-light\">4:00 PM</div>\n            <div class=\"row bg-light\">\n                <div class=\"col-2\">\n                    <img src=\"/images/houston_rockets.png\" alt=\"Houston Rockets\" class=\"team\"/>\n                </div>\n                <div class=\"col-7\">Rockets</div>\n                <div class=\"col-3\">{this.state.score}</div>\n                <div class=\"col-2\">\n                    <img src=\"/images/michigan.png\" alt=\"Michigan\" class=\"team\"/>\n                </div>\n                <div class=\"col-7\">Michigan</div>\n                <div class=\"col-3\">9999</div>\n            </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;","// Setting view\r\n// For MVP1 only select teams in NBA\r\nimport React, { Component } from 'react';\r\nimport * as data from './nbaTeams.json';\r\n\r\n\r\nclass Selection extends Component {\r\n  constructor() {\r\n  \tsuper();\r\n\r\n  \tlet selectedTeams = [];\r\n\r\n  \tfor (var i = 0; i < Object.keys(data).length - 1; i++) {\r\n  \t\tselectedTeams.push(false);\r\n\t}\r\n\r\n  \tthis.state = {\r\n      selectedTeams: selectedTeams, //index of selected teams\r\n      selectedTeamNames: [],\r\n      isSelected: false\r\n    };\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n\r\n    // this.getTeams();\r\n    // console.log(data[0].abbreviation);\r\n  }\r\n\r\n  handleInputChange(event, i) {\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    // const name = target.name;\r\n    const selectedIndex = event.target.dataset.indexnumber\r\n\r\n    console.log(value);\r\n    console.log(selectedIndex);\r\n\r\n    let selectedTeams = this.state.selectedTeams;\r\n  \tselectedTeams[selectedIndex] = value;\r\n\r\n\r\n  \tlet selectedTeamNames = [];\r\n  \tfor (var i = 0; i < Object.keys(data).length - 1; i++){\r\n  \t\tif (selectedTeams[i]){\r\n  \t\t\tselectedTeamNames.push(data[i].abbreviation);\r\n  \t\t}\r\n  \t}\r\n\r\n  \tthis.setState({\r\n    \tselectedTeams: selectedTeams,\r\n    \tselectedTeamNames: selectedTeamNames\r\n  \t});\r\n\r\n\r\n    // this.setState({\r\n    //   selectedTeams[selectedIndex] : value\r\n    // });\r\n  }\r\n\r\n  getAllTeams(){\r\n  \tvar indents = [];\r\n\r\n\tfor (var i = 0; i < Object.keys(data).length - 1; i++) {\r\n  \t\tindents.push(<form className='indent' key={i}>\r\n  \t\t<label>\r\n          {data[i].abbreviation}\r\n          <input\r\n            // name={`make-${index}`}\r\n            data-indexnumber = {i}\r\n            type=\"checkbox\"\r\n            checked={this.state.selectedTeams[i]}\r\n            onChange={this.handleInputChange } />\r\n        </label>\r\n        <br />\r\n      </form>);\r\n\t}\r\n\r\n\treturn indents;\r\n  }\r\n\r\n  showSelected(){\r\n\r\n  \tvar indents = [];\r\n\r\n  \tconsole.log(this.state);\r\n\r\n\r\n\tfor (var i = 0; i < this.state.selectedTeamNames.length; i++) {\r\n  \t\tindents.push(<div>{this.state.selectedTeamNames[i]}</div>);\r\n\t}\r\n\r\n\treturn indents;\r\n\r\n  }\r\n\r\n  // render() {\r\n  //   return (\r\n  //     <form>\r\n  //       <label>\r\n          \r\n  //         <input\r\n  //           name=\"isGoing\"\r\n  //           type=\"checkbox\"\r\n  //           checked={this.state.isGoing}\r\n  //           onChange={this.handleInputChange} />\r\n  //       </label>\r\n  //       <br />\r\n  //       <label>\r\n  //         Number of guests:\r\n  //         <input\r\n  //           name=\"numberOfGuests\"\r\n  //           type=\"number\"\r\n  //           value={this.state.numberOfGuests}\r\n  //           onChange={this.handleInputChange} />\r\n  //       </label>\r\n  //     </form>\r\n  //   );\r\n  // }\r\n\r\n  render() {\r\n\r\n    return (\r\n    \t<div>\r\n    \t{this.showSelected()}\r\n    \t{this.getAllTeams()}\r\n    \t</div>\r\n    \t); \r\n\t}\r\n\r\n}\r\n\r\nexport default Selection;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Selection from './setting';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Selection />, document.getElementById('select'));\n\n\nReactDOM.render(<App />, document.getElementById('all-games'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}